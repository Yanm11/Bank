{"ast":null,"code":"var _jsxFileName = \"/Users/yanmeiri/Library/Mobile Documents/com~apple~CloudDocs/Bank/frontend/src/components/auth/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { axiosi } from \"../../config/Axios\";\nimport LoadingSpinner from \"../LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // null while loading\n\n  useEffect(() => {\n    const verifyAuth = async () => {\n      try {\n        await axiosi.get('/auth/check-auth'); // Backend API to verify the token\n        setIsAuthenticated(true); // Token is valid\n      } catch (error) {\n        setIsAuthenticated(false); // Token is invalid or expired\n      }\n    };\n    verifyAuth();\n  }, []);\n\n  // Show a loading spinner while checking auth\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n  return isAuthenticated ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 41\n  }, this);\n};\n_s(ProtectedRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","axiosi","LoadingSpinner","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthenticated","setIsAuthenticated","verifyAuth","get","error","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/Users/yanmeiri/Library/Mobile Documents/com~apple~CloudDocs/Bank/frontend/src/components/auth/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport {axiosi} from \"../../config/Axios\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nconst ProtectedRoute = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(null); // null while loading\n\n    useEffect(() => {\n        const verifyAuth = async () => {\n            try {\n                await axiosi.get('/auth/check-auth'); // Backend API to verify the token\n                setIsAuthenticated(true); // Token is valid\n            } catch (error) {\n                setIsAuthenticated(false); // Token is invalid or expired\n            }\n        };\n\n        verifyAuth();\n    }, []);\n\n    // Show a loading spinner while checking auth\n    if (isAuthenticated === null) {\n        return <LoadingSpinner />;\n    }\n\n    return isAuthenticated ? children : <Navigate to=\"/login\" />;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAAQC,MAAM,QAAO,oBAAoB;AACzC,OAAOC,cAAc,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9DC,SAAS,CAAC,MAAM;IACZ,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACA,MAAMT,MAAM,CAACU,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACtCF,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZH,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC/B;IACJ,CAAC;IAEDC,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,eAAe,KAAK,IAAI,EAAE;IAC1B,oBAAOJ,OAAA,CAACF,cAAc;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7B;EAEA,OAAOR,eAAe,GAAGF,QAAQ,gBAAGF,OAAA,CAACJ,QAAQ;IAACiB,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChE,CAAC;AAACT,EAAA,CAtBIF,cAAc;AAAAa,EAAA,GAAdb,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}